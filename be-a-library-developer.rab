= Be a library developer!

: subtitle
   ((*R*))emember ((*t*))han ((*I*))magine

: author
   Kouhei Sutou
: institution
   ClearCode Inc.
: date
   2013/06/01
: allotted-time
   25m
: theme
   .

= Table of contents

  * Share this talk's goal
  * Describe key idea
  * Apply the key idea
  * Wrap up & The next step

= Share the goal

  * ((*Share this talk's goal*))
  * Describe key idea
  * Apply the key idea
  * Wrap up & The next step

= This talk's goal

(('tag:as-large-as-possible'))
You know how to develope more better softwares

= More better?

By example

= API

= API: 1

  # coderay ruby
  context.save
  context.circle(50, 50, 10)
  context.stroke
  context.restore

(('tag:center'))(('note:from cairo gem'))

= API: 1 (better)

  # coderay ruby
  context.save do
  context.circle(50, 50, 10)
  context.stroke
  end

(('tag:center'))(('note:from cairo gem'))

= API: 1 (better)

  # coderay ruby
  context.save do
    context.circle(50, 50, 10)
    context.stroke
  end

(('tag:center'))(('note:from cairo gem'))

= API: 2

  # coderay ruby
  # low level
  window.get_property("opacity")
  # better
  window.opacity

(('tag:center'))(('note:from gtk2 gem'))

= API: 3 (better?)

  # coderay ruby
  # low level
  window.get_property("visible")
  # better
  # ???: hint: "visible" is bool

(('tag:center'))(('note:from gtk2 gem'))

= API: 3 (better)

  # coderay ruby
  # low level
  window.get_property("visible")
  # better
  window.visible?

(('tag:center'))(('note:from gtk2 gem'))

= API: 4

  # coderay ruby
  # better for record as collection
  record["name"]
  # better for record as object
  record.name

(('tag:center'))(('note:from groonga gem'))

= API: 5

  # coderay ruby
  require "gst"
  # ???
  Gst.init # <- What?
  Gst::ElementFactory.make("playbin")

(('tag:center'))(('note:from gstreamer gem'))

= API: 5

  # coderay ruby
  require "gst"
  # For advanced use
  Gst.init("--gst-debug=*:9")
  Gst::ElementFactory.make("playbin")

(('tag:center'))(('note:from gstreamer gem'))

= API: 5 (better)

  # coderay ruby
  require "gst"
  # Make optional
  # Gst.init
  Gst::ElementFactory.make("playbin")

(('tag:center'))(('note:from gstreamer gem'))

= Implementation

  # coderay ruby
  class << Gst
    def const_missing(name)
      init; const_get(name); end
    def init(*argv)
      # ...initialize library...
      class << self
        remove_method(:init)
        remove_method(:const_missing)
      end; end; end

= Docuemnt

= Document: 1

Install:

  For Debian GNU/Linux:
    % sudo apt-get install libgtk2.0-dev
    % gem install gtk2
  For OS X:
    ...

= Document: 1 (better)

Install:

  % gem install gtk2

= Release

= Release: 1

Announce:

  Ruby 1.8.7 was released on June 1st, 2008.  In commemoration
  of the thrid anniversary of Ruby 1.8.7, we have a new
  patchlevel release today.  It includes several bug fixes.
  For the detail please read the ChangeLog.

= Release: 1: not good

((*read the ChangeLog*))

= Release: 1: better

How?\nLet's think later

= Confirmation

= This talk's goal

(('tag:as-large-as-possible'))
You know how to develope more better softwares

= More better

Showed\nby examples

= Table of contents

  * Share this talk's goal
  * ((*Describe key idea*))
  * Apply the key idea
  * Wrap up & The next step

= Key idea

((*R*))emember\n((*t*))han\n((*I*))magine

= Imagine

  * Difficult
    * Because you didn't know
  * Many programmers can't imagine about other people

= Remember

  * Easy
    * Because you know
  * Many Japanese Rubyists can't remember wait time

= To remember,

  * Experience
  * Ask
  * Observe

= Experience!

  * ((*Experience*))
  * Ask
  * Observe

= What should you experience?

= What

Library user

= Library user?

You experienced!

= Key idea

((*R*))emember\n((*t*))han\n((*I*))magine

= Remember

= Apply the key idea

  * Share this talk's goal
  * Describe key idea
  * ((*Apply the key idea*))
  * Wrap up & The next step

= API

= API: 1

  # coderay ruby
  context.save
  context.circle(50, 50, 10)
  context.stroke
  context.restore

(('tag:center'))(('note:from cairo gem'))

= API: 1: Point

  # coderay ruby
  context.save    # Setup
  context.circle(50, 50, 10)
  context.stroke
  context.restore # Teardown

(('tag:center'))(('note:from cairo gem'))

= Remember

File

= Remember: File

  # coderay ruby

  # Setup
  file = File.open(path)
  file.read
  # Teardown
  file.close

= Remember: File

  # coderay ruby
  # Ensure teardown
  File.open(path) do |file|
    file.read
    raise "error!"
  end

= do ... end style

Merit:\n
Ensure close

= API: 1

  # coderay ruby
  context.save    # Setup
  context.circle(50, 50, 10)
  context.stroke
  context.restore # Teardown

(('tag:center'))(('note:from cairo gem'))

= API: 1 (better)

  # coderay ruby
  # Ensure teardown
  context.save do
    context.circle(50, 50, 10)
    context.stroke
  end

(('tag:center'))(('note:from cairo gem'))

= API: 2

  # coderay ruby
  # low level
  window.get_property("opacity")
  # better
  window.opacity

(('tag:center'))(('note:from gtk2 gem'))

= API: 2: Point

property\n==\nattribute

= Remember

Normal object

= API: 2

  # coderay ruby
  # low level
  window.get_property("opacity")
  # better
  window.opacity

(('tag:center'))(('note:from gtk2 gem'))

= API: 3 (better?)

  # coderay ruby
  # low level
  window.get_property("visible")
  # better
  # ???: hint: "visible" is bool

(('tag:center'))(('note:from gtk2 gem'))

= Remember

Predicate

= Remember: Predicate

  # coderay ruby
  [].empty?
  0.zero?

= API: 3 (better)

  # coderay ruby
  # low level
  window.get_property("visible")
  # better: "?" suffix
  window.visible?

(('tag:center'))(('note:from gtk2 gem'))

= API: 4

  # coderay ruby
  # better for record as collection
  record["name"]
  # better for record as object
  record.name

(('tag:center'))(('note:from groonga gem'))

= API: 5

  # coderay ruby
  require "gst"
  # ???
  Gst.init # <- What?
  Gst::ElementFactory.make("playbin")

(('tag:center'))(('note:from gstreamer gem'))

= API: 5

  # coderay ruby
  require "gst"
  # For advanced use
  Gst.init("--gst-debug=*:9")
  Gst::ElementFactory.make("playbin")

(('tag:center'))(('note:from gstreamer gem'))

= Remember

Socket

= Socket in C

  # coderay c
  int fd;
  struct sockaddr *address;
  fd = socket(PF_INET, SOCK_STREAM, 0);
  /* address.sa_family = ...; */
  connect(fd, address, address_size);

= Socket in Ruby

  # coderay ruby
  TCPSocket.new("www.ruby-lang.org", 80)

= Point

Provide defaults

= API: 5 (better)

  # coderay ruby
  require "gst"
  # Make optional
  # Gst.init
  Gst::ElementFactory.make("playbin")

(('tag:center'))(('note:from gstreamer gem'))

= Docuemnt

= Document: 1

Install:

  For Debian GNU/Linux:
    % sudo apt-get install libgtk2.0-dev
    % gem install gtk2
  For OS X:
    ...

= Remember

You installed Nokogiri

= Remember: Nokogiri

  % gem install nokogiri
  ...
  libxml2 is missing. ...
  ...
  *** extconf.rb failed ***

= Remember: Nokogiri

  % sudo apt-get install libxml2-dev

= Remember: Nokogiri

  % gem install nokogiri
  ...
  libxslt is missing. ...
  ...
  *** extconf.rb failed ***

= Document: 1 (better)

Install:

  % gem install gtk2
  (with auto "apt-get install")

= Release

= Release: 1

Announce:

  Ruby 1.8.7 was released on June 1st, 2008.  In commemoration
  of the thrid anniversary of Ruby 1.8.7, we have a new
  patchlevel release today.  It includes several bug fixes.
  For the detail please read the ChangeLog.

= Release: 1: not good

((*read the ChangeLog*))

= Release: 1: better

How?\nLet's think later

TODO

= Wrap up

  * Share this talk's goal
  * Describe key idea
  * Apply the key idea
  * ((*Wrap up*)) & The next step

= This talk's goal

(('tag:as-large-as-possible'))
You know how to develope more better softwares

= Key idea

((*R*))emember\n((*t*))han\n((*I*))magine

= Remember than Imagine

  * Imagine
    * Difficult
  * Remember
    * Easy

= For development

  * Experience library user
    * You must done!
  * Then ((*remember*)) the experience

= The next step

  * Share this talk's goal
  * Describe key idea
  * Apply the key idea
  * Wrap up & ((*The next step*))

= Be a library developer

= Why?

  * It is good experience for "remember than imagine"
  * "library developer" experience is useful to 
    develope other softwares such as Ruby

= Conclusion

TODO
