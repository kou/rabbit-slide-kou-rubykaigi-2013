原稿

ライブラリ開発者になろう

はじめまして。クリアコードの須藤といいます。みなさん、クリアコードという会社を知っていますか？RubyKaigi 2013のシルバースポンサーをしている会社の1つです。

今日は、みなさんにライブラリー開発者になるとよりよいソフトウェアを書ける開発者になれますよ、という話をします。1日目のまつもとさんの話では言語を作ればよいソフトウェアを書けるようになると言っていましたが、私の話はそれとは少し違うということです。

大まかにいうとこのような順に話します。

まず、1つ例をだしながら今回の話のゴールを説明します。聴いているみなさんと私が設定したゴールを共有できたならここでの話は成功です。

次に、共有したゴールを実現するためにキーとなる考えを説明します。これは、私がいろいろなライブラリーを開発している中で得られた考えです。

その後、いくつかの例に対してキーとなる考えを適用してゴールを実現していきます。ここで、どうやってキーとなる考えを使えばいいかをなんとなくわかれば成功です。

これで一通り説明が済んだのでおさらいします。聴いているみなさんが再確認できればいいなぁと思います。

最後に、ライブラリー開発者になった後のことについて少しだけ匂わしておしまいです。このとき、みなさんがいい話だったなぁという顔をしていれば、ここで「最後まで話を聴いてくれてありがとうございます」というはずです。

それでは、例を出しながら今日の話のゴールを説明します。

まず、今日の話のゴールです。ゴールは「よりよいソフトウェアを開発するための方法をみなさんが知ること」です。これについて、まつもとさんは言語を作ればいいよ、と言っていましたね。私はライブラリー開発者になればいいよ、といいます。

それでは、まずはよりよいソフトウェアとはどんなソフトウェアかを例を見ながら考えてみましょう。どうやって開発するかはよりよいソフトウェアはどんなソフトウェアかを考えてからです。

こんなAPIがあります。これはrcairoというライブラリーのAPIです。rcairoはcairoというグラフィックスライブラリーのRubyバインディングで、私が開発しています。このRabbitというプレゼンツールも私が開発しているのですが、Rabbitでもrcairoを使っています。

saveで現在の描画情報を保存しておいてrestoreでsaveした状態まで戻します。描画情報とはどのように線を書くかとか、線の太さはどのくらいとか、そういうやつです。間にあるcircleとstrokeで円を書いています。

では、これをよりよくするためにはどうしたらよいでしょうか。「よりよい」の基準はいろいろありますが、まずは自分の「よりよい」の基準で考えてみてください。「よりよい」の指針のひとつは後で説明します。

saveとrestoreに注目してみるとどうでしょうか。

ここに注目するとブロックを使った書き方を思いつきます。こちらの方がよりよいAPIです。

では、どうしてブロックを使ったほうがよりよいAPIなのでしょうか？それは、よりRubyらしい書き方だからです。「Rubyらしい」とはどういうことでしょうか？「○○らしい」とは「他と似ている」ということです。「Rubyらしい」書き方だとまわりのコードと似たような記述になります。つまり、まわりのコードと統一感（sense of unity）が出るということです。

統一感がでると読みやすくなります。読みやすく書けるというのはよりよいソフトウェアを開発するために重要なことです。

読みやすくなるとメンテナンスが楽になります。メンテナンス性は繰り返しソフトウェアを改良していくために必要なものです。一発で完璧なソフトウェアは作れないので繰り返し改良していく必要があるからです。

というようによりよいソフトウェアの開発につながるので「Rubyらしい書き方」はよりよいの基準のひとつです。

では、rcairoでのブロックの使い方は「Rubyらしい」のか確認してみましょう。組み込みライブラリーのFileクラスを思い出してください。Fileクラスではopenでファイルを開きます。readして使い終わったら閉じています。openが前処理でcloseが後処理です。

ただ、このように明示的にcloseを書くのはRuby初心者です。Rubyに慣れた人はこのように前処理をするメソッドにブロックを渡してこう書きます。こうすることの利点は2つです。1つはcloseのし忘れがなくなるということです。もう1つは具体的にどう後処理をしなければいけないかを意識しなくてもよくなるということです。ファイルの場合の後処理はcloseで、Dir.chdirのときは元のディレクトリーに戻る、などと使いわける必要はありません。ブロックを抜けたら「いい感じ」に後処理をしてくれます。これが、Rubyの組み込みライブラリーで使われている後処理のためにブロックを使う方法です。つまり、これと「似た」使い方をすれば「Rubyらしい」ということです。

では、もう一度rcairoの例を見てみましょう。saveが前処理の部分、ブロックを抜けたところで実行するrestoreは後処理の部分です。Fileと「似た」使い方ですね。ということで「Rubyらしい」と言えます。

おさらいします。「よりよい」の基準の1つは「Rubyらしい」ということです。「Rubyらしい」とはどういうことかというのは例を出して説明しました。「Rubyらしい」をいいかえると「他と似ている」ということです。今日の話のゴールを覚えていますか？「よりよいソフトウェアを開発するための方法をみなさんが知ること」です。いいかえると、「似ているとはどういうことかを知って、それと同じようにすること」です。

私が設定したゴールを共有できましたか？共有できていれば、ここまでの話は成功です。

まぁ、成功している体で次の話にいきます。。。

次は、このゴールを実現するためのキーとなる考えを説明します。

キーとなる考えは、「想像するんじゃなくて思い出す」です。

「想像すること」は難しいことです。これはまだ知らないことだからです。


では、「思い出すこと」はどうでしょうか？これは、簡単なことです。すでに知っていることですから。ただし、知っていても忘れてしまうと思い出せません。

では、思い出せるようにするにはどうしたらよいかというと、知ることです。知らないと思い出すことはできません。

知るためには自分で経験する方法、人から聞く方法、観察して学ぶ方法などがあります。この中でも一番初めにやることは経験してみることです。経験すれば知っているので思い出せるようになります。

ということで、キーとなる考えは「想像するんじゃなくて思い出す」です。

では、このキーとなる考えを適用してみましょう。

まず、このキーとなる考えで実現したいゴールの再確認です。ゴールは「よりよいソフトウェアを開発するための方法をみなさんが知ること」でしたね。

このゴールを知識を得るためには知識が必要です。では、その知識を得るために何を経験すればいいでしょうか。それは、「Rubyist」としての経験です。「Rubyist」よりも「Rubyユーザー」の方が正確なのですが、響きがいいので今日は「Rubyist」の方を使います。で、Rubyistは、すでにみなさん経験していますよね！

では、実際にその経験を活かしてみましょう。

これは、Ruby/GTK2というライブラリーのAPIです。Ruby/GTK2はGTK+というGUIツールキットのRubyバインディングです。Ruby/GTK2も私が開発していて、このプレゼンツールでも使っています。

windowオブジェクトのopacityプロパティを取得しています。opacityとは透明じゃない度合いのことですね。では、これをどうすればよりよいAPIになるか考えてみてください。よりよりAPIとはRubyらしいAPIでしたね。どうすればよりRubyらしいAPIになるでしょうか。

（15秒くらい待つ。）

よりよいAPIとしてopacityというメソッドを提供しています。オブジェクトのプロパティを取得するためにプロパティ名のメソッドを使うというのはRubyではよくやる方法なのでRubyらしいです。プロパティを属性と言い換えるとわかりやすいかもしれません。Rubyではattr_readerというそのためのショートカットも用意されています。

ところで、みなさんは、今、よりよいAPIを考えられましたか？「思い出す」って「難しいじゃん」って思いませんでしたか？そう、難しいんです。「思い出せ！？」「Rubyらしいって何！？」という話です。

すでに知っているはずなのにどうして思い出すことが難しいんでしょう。それは、「想像するんじゃなくて思い出す」という経験をしていないからです。今、みなさんは経験したんじゃなくて「聞いただけ」という状態です。

それでは、もう一度。ゴールを実現するためには何を経験したらよいのでしょうか。それは、ライブラリー開発者としての経験です。ここでようやくこの話のタイトルがでてきました。

ライブラリー開発者はRubyistとして使いやすいAPIとはどういうAPIだろうと考えたり、ライブラリーのユーザーとしてわかりやすいドキュメントはどんなドキュメントだろう、ということを考えます。他にもいろいろ考えます。そして、これらを何度も何度も考えます。考える機会がたくさんあるのです。「たくさん」というのはとてもよい練習になります。そのため、「想像するんじゃなくて思い出す」をうまくやるためにはライブラリー開発者になることをオススメします。

それでは、APIとドキュメントについて考える練習をしてみましょう。まずはAPIです。プロパティの値を取得するにはプロパティ名と同じメソッドを用意するのがRubyらしいのでしたね。それでは、visibleというプロパティという場合はどうでしょう。ヒントはvisibleは真偽値を返すということです。

（15秒くらい待つ）

Rubyらしくするならメソッド名の最後に「?」をつけますね。

では、なんでもメソッド名にすればよいのでしょうか？この例ではどうでしょう。

これはrroongaという全文検索ライブラリのAPIで、やはり、rroongaも私が開発しています。

rroongaはデータベース機能も持っていて、ここのrecordはテーブルの中の1つのレコードのことです。このレコードのカラムの値にアクセスするにはHashのようにアクセスするのとメソッドでアクセスするのはどっちがよいでしょうか？レコードをコレクションと考えるならHashのようにアクセスするのがRubyらしいですし、オブジェクトと考えるならメソッドでアクセスするのがRubyらしいですね。

ちなみにrroongaはどちらのAPIも提供していてメソッドの方を推奨しています。レコードをオブジェクトとして捉えているということです。HashのようなAPIはカラム名を動的に指定したい時に__send__を使わなくてすむから、と言う理由で提供しています。

次はRuby/GStreamerの例です。

これはGStreamerというマルチメディアライブラリーのRubyバインディングです。やはりこれも私が開発しています。nariさんのおかげでRabbitでも使えるようになっています。

このライブラリーでは初期化メソッドを呼ぶ必要があります。しかし、普通はrequireしたらすぐ使えるものなので使いにくいです。

であればrequireでやればいいじゃんと思いますよね？でも、高度な使い方をする人のためにカスタマイズできるようにしておきたいのです。例えば、デバッグオプション付きで初期化したいのです。

では、どうするとよりよくなるでしょうか。

（15秒くらい待つ）

呼ばなくても動くようにします。これで普通の使い方になりました。

ちなみに、こんな感じでconst_missingとremovd_methodを組み合わせて実現できます。


ドキュメントについても考えてみましょう。

Ruby/GTK2は拡張ライブラリーなので事前にGTK+というCのライブラリーをインストールしておく必要があります。ユーザーのことを考えるとドキュメントにはその旨を書いておいた方がいいよね、となります。でも、これでよいのでしょうか？

よりよいドキュメントならこうするべきです。gemをインストールするときは「gem install gem名」が普通のやり方です。これがRubyGemsらしさです。普通はこれでインストールするなら、これでインストールできるようにするべきなのです。Ruby/GTK2はgem install gtk2とやったら必要なパッケージを自動でインストールするようにして、インストールドキュメントはgem install gtk2だけにしています。

ということで、実際に「想像するんじゃなくて思い出す」というキーとなる考えを適用してみました。Rubyistとして普通はどうやっているかを「思い出す」、そしてそれと同じようにする、という例を示しました。よりよいソフトウェアを開発するために使えそうな考えな気がしましたか？

まとめます。この話のゴールは「よりよいソフトウェアを開発するための方法をみなさんが知ること」でした。「よりよい」とは「Rubyらしい」、言い換えると「他と似ている」ということです。他と似ているとコードに統一感が出て読みやすくなります。開発を継続してよりよいソフトウェアにしていくためには読みやすいということはとても大事なことです。
これを実現するためのキーとなる考えが「想像するんじゃなくて思い出す」です。なぜなら想像することは知らないので難しく、思い出すことは知っているので簡単だからです。ソフトウェア開発に当てはめてみると、思い出すためにはRubyistとしての経験が必要です。あとはその経験を思い出せばいいのです。しかし、「思い出す」という経験がないので「思い出す」ことが難しいことでしょう。「思い出す」経験をするためにはライブラリー開発者になることをおすすめします。ライブラリーを開発すると何度も何度も「思い出す」必要があり、とてもよい練習になります。ライブラリ開発者を経験すればよりよいソフトウェアを開発することができるようになるはずです。という話をしました。

最後にライブラリー開発者になった後の話をして終わりにします。

「ライブラリー開発者」としての経験を他のことにも使ってください。たとえば、他のソフトウェアの開発に使ってください。Rubyでもいいです。他のソフトウェアを開発するときには、よりよいバグレポートはどんなバグレポートだろうとか、よいパッチはどんなパッチだろうとかを「思い出して」ください。例えば、バグレポートなら再現方法があるとうれしいですし、期待する結果もあるとうれしいですね。パッチならわかりやすい単位で分割されているとうれしいですし、適切なコミットメッセージがついているとうれしいですね。ライブラリー開発者としてバグレポートをもらった経験を思い出せばいろいろわかるはずです。

ということで、ライブラリー開発者になりましょう！

参考までに。。。

クリアコードというシルバースポンサーな会社はインターンシップへの応募を受け付けています。このインターンシップではクリアコードのメンバーとライブラリーを開発します。よりよいソフトウェアを開発するためのよい経験になるはずなので、ぜひ検討してみてください。

このとき、みなさんがいい話だったなぁという顔をしていれば、ここで「最後まで話を聴いてくれてありがとうございます」というはずです。
