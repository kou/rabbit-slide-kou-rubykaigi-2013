原稿

ライブラリ開発者になろう

はじめまして。クリアコードの須藤といいます。みなさん、クリアコードという会社を知っていますか？RubyKaigi 2013のシルバースポンサーをしている会社の1つです。

今日は、みなさんにライブラリー開発者になって欲しいなぁ、という話をします。これば、私自身、いろいろなライブラリーを開発してきて、ライブラリーを開発することで得られたことがたくさんあったなぁと思うからです。そして、それはみなさんにとっても役に立つことだと表います。今日話すことは私がライブラリーを開発してきて得られたことのエッセンスです。

大まかにいうとこのような順に話します。

まず、例をだしながら今回の話のゴールを説明します。私が設定したゴールを、聴いているみなさんと共有できるとここでの話は成功です。

次に、共有したゴールを実現するためにキーとなる考えを説明します。これは、私がいろいろなライブラリーを開発している中で得られた考えです。

その後、ゴールを共有するときに出した例に対してキーとなる考えを適用していきます。ここで、キーとなる考えで何をしようとしているかを聴いているみなさんがピンときたら成功です。

これで一通り説明が済んだのでおさらいします。聴いているみなさんが再確認できればいいなぁと思います。

最後に、ライブラリー開発者になった後のことについて少しだけ匂わしておしまいです。このとき、みなさんがいい話だったなぁという顔をしていれば、ここで「最後まで話を聴いてくれてありがとうございます」というはずです。

それでは、例をだしながら今日の話のゴールを説明します。

まず、今日の話のゴールです。ゴールはよりよいソフトウェアを開発するための方法をみなさんが知ることです。このゴールを私と共有できそうですか？私はそのゴールを達成するためにこれからいろんな例をだしながら説明していきます。みなさんはこの方法は本当によりよいソフトウェアを開発する方法だろうかと自分の経験も踏まえながら考えながら聞いてください。よりよいソフトウェアとはどんなソフトウェアか、それを開発するにはどうしたらよいかを考えるきっかけになるとうれしいです。

それでは、まずはよりよいソフトウェアとはどんなソフトウェアかを例を見ながら考えてみましょう。どうやって開発するかはよりよいソフトウェアはどんなソフトウェアかを考えてからです。

まずはAPIについて考えてみましょう。

最初の例はrcairoというライブラリーです。これはcairoというグラフィックスライブラリーのRubyバインディングです。rcairoは私が開発しています。このRabbitというプレゼンソフトも私が開発しているのですが、Rabbitでもrcairoを使っています。

saveで現在の描画情報を保存しておいてrestoreでsaveした状態まで戻します。描画情報とはテキストの色とか線の太さとかそういうやつです。間にあるcircleとstrokeで円を書いています。

では、これをもっとよくするためにはどうしたらよいでしょうか。「もっとよい」の基準は人それぞれですが、まずは自分の「もっとよい」の基準で考えてみてください。「もっとよい」の指針のひとつは後で説明します。

saveとrestoreに注目してみるとどうでしょうか。ここに注目するとブロックを使った書き方の方がよりRubyらしい書き方ですね。Rubyらしい書き方の方がまわりのコードと統一感が出て読みやすくなります。読みやすくなるとメンテナンスが楽になるためよりよいことです。つまり、「Rubyらしい書き方」がよりよい基準のひとつです。

それでは、次の例です。この例はRuby/GTK2というライブラリーです。これはGTK+というGUIツールキットのRubyバインディングです。Ruby/GTK2も私が開発しています。このプレゼンソフトでも使っています。

GUIの各要素、例えばウィンドウやボタンのことをウィジェットというのですが、ウィジェットにはプロパティを持っています。そのプロパティにアクセスするAPIを考えます。単純に書くとget_property(プロパティ名)となります。では、これを「プロパティ名」のメソッドを呼ぶようにしてはどうでしょうか。windowウィジェットの透明度を取得していることがより簡潔に表現されて読みやすくなりました。

では、opacityではなくvisibleというプロパティを取得するときはどうしたらよいでしょうか。ヒントはvisibleは真偽値だということです。

この場合は最後に「?」をつけて「visible?」とする方が真偽値を返すということが明確になり読みやすくなります。

次はrroongaというライブラリーです。これはgroongaという全文検索エンジンのRubyバインディングです。rroongaも私が開発しています。このプレゼンソフトでは使っていません。

rroongaはテーブルにレコードとしてデータを格納します。それでは、レコードに格納したデータにはどのようにアクセスできるとよりよいでしょうか。レコードをデータを集めた集合だと考えてみるとどうでしょうか。この場合はHashのようにアクセスできると自然です。そうではなく、レコードを複数の属性を持つオブジェクトと考えてみるとどうでしょうか。この場合はメソッドとしてアクセスできると自然です。どうとらえるかでよりよいAPIは変わります。なお、rroongaはオブジェクトとして考えているので、メソッドとしてアクセスできるようにしています。ただ、属性名を動的に変えてアクセスしたい時のためにHashのようにもアクセスできるようにもしています。推奨している方法はオブジェクトとしてアクセスする方法です。

次はRuby/GStreamerというライブラリーです。これはGStreamerというマルチメディアを扱うライブラリーのRubyバインディングです。このプレゼンソフトでも使えます。

この中でGst.initは何をしているのでしょうか。初期化をしていることはわかります。問題は、自分で呼ばないといけないのかということです。

自分で呼ばないといけない場合があります。それは、デバッグオプションを指定するなどGStreamerの細かい挙動を変えたいときです。ただ、これは上級者向けの使い方です。通常はオプションなしで初期化して大丈夫です。であれば、Gst.initを呼ばなくても動くようにしましょう。これで、通常は気にしなくてよくなり、必要な人は使うことができます。なお、参考までに実装方法を紹介します。

次はドキュメントに関しての例を見てみましょう。

TODO: ...



